üìå COMANDOS IMPORTANTES ‚Äì MYPY & RUFF
======================================

‚úÖ MYPY ‚Äì Comprobaci√≥n de tipos est√°ticos
-----------------------------------------

‚ñ∂Ô∏è Comprobar TODO el proyecto:
poetry run mypy .

‚ñ∂Ô∏è Comprobar un archivo espec√≠fico:
poetry run mypy bot/telegram_bot.py

‚ñ∂Ô∏è Comprobar varios archivos:
poetry run mypy bot/grafico.py bot/seguimiento.py


‚úÖ RUFF ‚Äì Linter y Formateador de c√≥digo
----------------------------------------

üîç LINTING (buscar errores de estilo, bugs, imports mal ordenados, etc.)

‚ñ∂Ô∏è Revisar TODO el proyecto:
poetry run ruff check .

‚ñ∂Ô∏è Revisar un archivo:
poetry run ruff check bot/telegram_bot.py

‚ñ∂Ô∏è Revisar y corregir autom√°ticamente:
poetry run ruff check --fix .

‚ñ∂Ô∏è Ver los cambios que har√≠a (sin aplicarlos):
poetry run ruff check --diff .


ÔøΩÔøΩ FORMATEO AUTOM√ÅTICO (como Black)

‚ñ∂Ô∏è Formatear TODO el c√≥digo:
poetry run ruff format .

‚ñ∂Ô∏è Formatear un archivo:
poetry run ruff format bot/grafico.py


‚úÖ COMANDOS EXTRA √öTILES
-------------------------

‚ñ∂Ô∏è Ver todos los tipos de errores detectables por Ruff:
poetry run ruff linter

‚ñ∂Ô∏è Ejecutar solo en tests, por ejemplo:
poetry run mypy tests/
poetry run ruff check tests/


‚úÖ OPCIONAL ‚Äì Atajos en pyproject.toml
--------------------------------------

[tool.poetry.scripts]
lint = "ruff:check"
format = "ruff:format"

‚ñ∂Ô∏è Y luego puedes usar:
poetry run lint .
poetry run format .


üß† NOTA FINAL
-------------
- Usa `mypy` para detectar errores de tipos antes de que ocurran.
- Usa `ruff` para mantener tu c√≥digo limpio, ordenado y moderno.
- Ambos combinados hacen tu proyecto mucho m√°s profesional y mantenible.
